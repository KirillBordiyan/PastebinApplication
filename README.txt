- краткое описание
- последовательность запуска
- как проверить работу (файл постман)
- стек


=============================================       PASTEBIN APPLICATION        ==================================

В общем и целом:

    Веб-сервис для работы с файлами.

    Принцип работы следующий:
        - пользователь проходит этап регистрации/аутентификации;
        - попадая на свою страницу, как пользователя, он может создать/загрузить файл (фронтенд, начинал, но не успел);
        - зная никнеймы пользователей, он может посетить их страницу и просмотреть загруженные/созданные ими файлы (-//-);
        - выбрав файл, он может просмотреть содержимое или скачать его по специально ссылке;


Back-end (по порядку):

    Прописан файл конфигурации для определения состояний клиентов (swagger/minio/redis);
    Подтянуты чувствительные данные из вне (application.yaml)
    Реализован ExceptionHandler с кастомным телом ошибок;
    Созданы модели (сущности БД) и DTO для пользователей и файлов;
    Также для моделей и DTO использованы автоматически сгенерированные мапперы;
    Прописана своя система авторизации/аутентификации с использованием паттерна фабрика (для генерации JWT);
    Также имеются кастомные SecurityExpressions для проверки доступности методов
    Реализованы RestController'ы для уровней:
        - авторизации;
        - взаимодействия с пользователями;
        - взаимодействия с файлами;
    Аналогично, описаны репозитории сохраняемых сущностей и сервисы;

    В БД сохраняется пользователь и данные о файлах при создании, по типу оригинального названия, названия в корзине minio,
        и владельца файла.

    Для отображения, например, нужно оригинальное название, а для скачивания - название в корзине
    Сами ссылки НЕ хранятся, а генерируются самим minio при обращении.

    В папке resources есть папка db-init, которая использовалась для авто создания схемы
        и (ранее) для пробы внесения данных в БД на старте

    Из не очень приятного - в программе реализован функционал кэширования данных с помощью redis,
    но я не много где придумал что кэшировать + это мешало бы для тестирования в postman
    поэтому было принято решение сервис оставить, но не подключать его с целью конечного использования (*).

    (*) подключены зависимости, поднимается сервис для наглядности и приложение к нему подключается, но
        аннотации для кэширования закомментированы


    Также изменена идея запуска всей системы:
        изначально создавал docker-compose файл и dockerfile для сборки java проекта,
        но так как сервис minio возвращает ссылки на backend с учетом другой подписи (из-за сети docker и клиента),
        то эти ссылки не доступны из вне;
    То есть, backend в сети docker делает запрос на http://minio-docker:9000, получает ссылку по которой можно обратиться
        в докер-контейнер по этому адресу, а из вне этот самый адрес недоступен, следовательно, ссылка невалидна = ошибка
    Решением данный проблемы могло бы стать поднятие frontend'а в той же сети, что подняты backend и minio,
        тогда со ссылками все ок
    (ну либо, как сейчас, поднимать сервисы по отдельности)

Front-end:

    Изначально задумывалось реализовать frontend часть с использованием html+css+js,
        однако в условиях ограничения времени от этого было решено отказаться
        (подробнее в разделе о проверке работы приложения);



=============================================       ЗАПУСК        ==================================

Сперва файл .env.example переименовать как .env (будто он основной)
Для работы приложения понадобится 4 контейнера (в скобках их название):
    - БД (ЕСТЬ ОБЯЗАТЕЛЬНЫЕ ДЕЙСТВИЯ!!!!)
    - админка
    - redis
    - minio

Порядок определен последовательностью описания(!!!!!)

1) Для БД (pastebin-db-only):

    - запуск:
docker run --name pastebin-db-only -p 5432:5432 -e POSTGRES_USER=root -e POSTGRES_PASSWORD=1234 -e POSTGRES_DB=pastebin -d postgres

    - вход cli (!!!!!!!!)
docker exec -ti pastebin-db-only psql -U root pastebin
        - ввести команды внутри контейнера (придется вручную или создать схему в adminer):
            create schema pastebin_schema;
            SET search_path = public, pastebin_schema; (при желании, если хочется видеть таблички через \d в консоли)

        - посмотреть схемы, чтобы была нужная нам pastebin_schema
            \dn
            или в адмайнере (наверное, приоритетнее)

2) Для adminer (adminer-local):
    - запуск
docker run --name adminer-local --link pastebin-db-only:db -p 5051:8080 adminer
    - доступ
движок: postgreSQL
сервер: db
имя: root
пароль: 1234
база данных: pastebin

внутри адмайнера выбрать схему --------> pastebin_schema


3,4) Контейнеры с minio и redis поднимаются через docker-compose up или в docker-compose.yaml файле


После последовательного запуска всех 4 контейнеров можно запускать приложение
    (для него, конечно, есть dockerfile, но там та же проблема ссылок из-за обращения к minio по minio-docker:9000)
Для приложения подключены плагины по типу .enc file support, но вроде ничего сверх лишнего нет

В консоли приложения по мере запуска и появления логов появятся SQL команды (также во время работы).


ВАЖНО!!!!

    Для jpa определено, что при запуске приложения данные в БД (таблицы, если контейнер не менять, то схема останется)
    будут удаляться и создаваться заново, это надо учитывать при перезапуске
    (в app.yaml помечено, как по-хорошему надо реализовать этот механизм);

    Изменение jpa-параметра на, например validate выдаст ошибку, тк в приложении зашито внесение списка ролей
    и создание админа
    (это можно подкрутить, если не хочется каждый раз видеть заново созданную БД)



=============================================       ПРОВЕРКА РАБОТЫ        ==================================

Изначально, как писал выше, хотелось бы сделать полный фронтенд, но не судьба, поэтому воспользуемся postman
Для удобства прикреплен файл pastebin.postman_collection.json, в котором описаны все запросы/скрипты/комментарии
Этот файл импортировать в postman

Сделан запрос на каждый endpoint и сохранены примеры входных данных, в некоторых местах оставлены комментарии
    с другими входными, чтобы далеко не ходить

Коротко о главном:
    - на auth будут проверки занятого никнейма/почты, но нет проверки на regexp;
    - на user слое метод update поддерживает обновление почты и пароля; (только у себя)
        даже если пароль не менялся (123 -> 123), он все равно будет переписан в БД
        (да для этого по-нормальному надо сделать подтверждение через почту или еще как-то);
      удалять пользователя может либо сам пользователь, либо админ, но не более
        также с файлами, предусмотрено (security expressions), что создавать файлы у пользователя может только сам пользователь
        админ может просмотреть/удалить;
      запрос "who am i" == стартовый после успешного логина
    - слой файлов описывает получение ссылки для загрузки и скачивания + получения списка всех файлов
        (для удобства фронтенда это делается отдельно)
    - в файлах есть папка presigned с примерами 2 методов
        после получения ссылки, например, для загрузки, можно вызвать метод upload (файл вроде будет встроен)
        а в веб версии minio появится файл
        после получения ссылки для скачивания, если файл в корзине есть, постман его скачает

P.S.
    Frontend был начат, написаны скрипты для security слоя, почти все html сделаны;
    Но не хватало времени сделать часть работы с созданием/загрузкой файлов и запросы получения ссылок+обращение к minio


=============================================       СТЕК        ======================================

Java 17
Spring Boot 3.3.1 (Security, JWT, JPA + Hibernate (core/validator), web, mapstruct)
Maven
docker (Dockerfile, docker-compose)
Postman
MinIO
PostrgeSQL
Adminer
Redis
Swagger
